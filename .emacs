;;; -*- lexical-binding: t -*-
(require 'package) ;; use elpa
(require 'cask "~/.cask/cask.el") ;; cask for easy dependency management
(setq package-archives ;; add marmalade and melpa to repositories
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "http://melpa.milkbox.net/packages/")))
(add-to-list 'load-path "~/.emacs.d/el-get")
(add-to-list 'load-path "~/emacs/irony-mode/elisp")
;; Keeping these at top due to conflicts
(cask-initialize)
(package-initialize)
;; Evil initialization
(global-evil-leader-mode)
(require 'evil-nerd-commenter "~/.emacs.d/lisp/evil-nerd-commenter/evil-nerd-commenter.el")
(evil-mode 1)
(evil-leader/set-leader "<SPC>")
(setq evilnc-comment-operator ",")
(evilnc-default-hotkeys)
(require 'smartparens-config)
(require 'smartparens-latex)
(require 'smartparens-ruby)
(smartparens-global-mode t)
(require 'org-mac-iCal)
(require 'edmacro)
(require 'cl)
(require 'advice)
(add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'load-path "~/.emacs.d/el-get/")
(add-to-list 'load-path "~/emacs/robe/")
(require 'helm-config)
(helm-mode 1)
(require 'robe)
(require 'caskxy)
;; Consider prefixing these to avoid namespace collisions
(require 'keybindings)
(require 'cl-patch) ;; el-doc breaks robe-mode without this, 90% confidence this is due to my install
(require 'variables)
(require 'filetype_definitions)
(require 'ensime)
(require 'scala-mode2)
(require 'cedet)
(require 'semantic/sb)
(require 'org-trello)
(require 'evil-leader)
(require 'flx-ido)
(require 'fixmee)
;;(require 'wl)
(require 'auto-complete-config)
(ac-config-default)
(require 'magit)
(require 'rainbow-mode "~/emacs/rainbow-mode.el")
(require 'git-gutter-fringe+)
(require 'bundler)
(require 'popup) ;; I want to use yasnippet without the cocoa crap
(require 'irony)
(require 'dime) ;; dylan is awesome and so is this
(require 'ac-c-headers) ;; required for ac to work in php files, don't ask me
(require 'epa-file)
(dime-setup '(dime-dylan dime-repl dime-compiler-notes-tree))

(defun yas/popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t)))

(unless (require 'el-get nil 'noerror)
  (with-current-bufferi
   (url-retrieve-synchronously
    "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
   (goto-char (point-max))
   (eval-print-last-sexp)))
(add-to-list 'el-get-recipe-path "~/emacs/el-get/recipes")
;;(el-get 'sync)

;; (add-hook 'inf-ruby-mode-hook 'ac-inf-ruby-enable)
(add-hook 'c-mode-hook 'my-c-hooks)
(add-hook 'c-mode-hook
          (lambda ()
            (add-to-list 'ac-sources 'ac-source-c-headers)
            (add-to-list 'ac-sources 'ac-source-c-header-symbols t)))
(add-hook 'clojure-mode-hook (lambda ()
                               (clj-refactor-mode 1))
          (defun kibit ()
            (interactive)
            (compile "lein kibit"))

          (defun kibit-current-file ()
            (interactive)
            (compile (concat "lein kibit " buffer-file-name))))
(add-hook 'js2-mode-hook 'skewer-mode)
(add-hook 'css-mode-hook 'skewer-css-mode)
(add-hook 'html-mode-hook 'skewer-html-mode)
(add-hook 'js2-mode-hook 'flymake-jslint-load)
(add-hook 'projectile-mode-hook 'projectile-rails-on)
(add-hook 'ruby-mode-hook 'projectile-rails-on)
(add-hook 'emacs-lisp-mode-hook 'smartparens-strict-mode)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'haskell-mode-hook 'structured-haskell-mode)
(add-hook 'scala-mode2-hook 'ensime-scala-hook)
(add-hook 'ruby-mode-hook 'robe-mode)
(defun backwards-kill-line ()
  (interactive) (kill-region
                 (point) (progn (beginning-of-line) (point))))
(defun pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))))))))
(defun my-c-hooks ()
  (yas/minor-mode-on)
  (auto-complete-mode 1)
  (when (member major-mode irony-known-modes)
    (irony-mode 1)))

(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file name new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))

(eval-after-load 'auto-complete
  '(add-to-list 'ac-modes 'inf-ruby-mode))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(fset 'yes-or-no-p 'y-or-n-p)


(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
;; (defun load-solarized()
;;(set-face-background 'shm-current-face "#eee8d5")
;;(set-face-background 'shm-quarantine-face "lemonchiffon"))
;; (set-face-attribute 'default nil :family "Fantasque Sans Mono" :height 130))
(set-face-attribute 'default nil :family "Inconsolata" :height 130)
;; (load-solarized)
;; (load-theme 'solarized-light t)
(load-theme 'monokai t)
;; (load-theme 'base16-default t)
;;(load-theme 'sanityinc-tomorrow-bright t)
(ac-config-default)
(global-auto-complete-mode t)
(ido-mode t)
(irony-enable 'ac)
(ido-everywhere t)
(flx-ido-mode 1)
(yas-global-mode t)
(ac-config-default)
(show-paren-mode 1)
(global-ede-mode 1)
(display-battery-mode 1)
(semantic-mode 1)
(global-semantic-idle-completions-mode t)
(global-semantic-decoration-mode t)
(global-semantic-highlight-func-mode t)
(global-semantic-show-unmatched-syntax-mode t)
(bash-completion-setup)
(smex-initialize)
(pretty-lambdas)
(rbenv-use-corresponding)
(windmove-default-keybindings)
(global-evil-surround-mode 1)
(desktop-save-mode 1)
(global-fixmee-mode 1)
(global-rainbow-delimiters-mode)

(defun wl-popup (title msg)
  (interactive)
  (async-shell-command (s-lex-format "terminal-notifier -title '${title}' -message '${msg}'")))
(autoload 'wl "wl" "wanderlust" t)
(autoload 'wl-other-frame "wl" "wanderlust on new frame." t)
(autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)
;;(run-at-time 0 (* 1 60) (wl-biff-check-folders))
(add-hook 'wl-biff-notify-hook
          (lambda()
            (wl-popup "Wanderlust" "You have new mail")))

(require 'compile)
(add-to-list 'compilation-error-regexp-alist-alist

             '(kibit "At \\([^:]+\\):\\([[:digit:]]+\\):" 1 2 nil 0))
(add-to-list 'compilation-error-regexp-alist 'kibit)
;; This is here on purpose don't worry
(sml/setup)
(sml/apply-theme 'respectful)

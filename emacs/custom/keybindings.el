;;; Joshua Bell's various custom keybindings for emacs
(global-set-key "\C-c\C-m" 'execute-extended-command)
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)
(global-set-key "\C-x\C-c" 'save-buffers-kill-emacs)
(global-set-key "\C-ce" 'compile)
(global-set-key "\C-x\C-k" 'backwards-kill-line)
(global-set-key "\C-co" 'ido-find-file)
(global-set-key "\C-c\C-er" 'eval-region)
(global-set-key "\C-c\C-t" 'multi-term)
(global-set-key "\C-xb" 'helm-mini)
(global-set-key "\C-x\C-f" 'helm-find-files)
(global-set-key (kbd "<s-return>") 'open-next-line)
;; (define-key sp-keymap (kbd "\C-c\C-p") '')
(define-key evil-normal-state-map "\C-l" 'evil-window-right)
(define-key evil-normal-state-map "\C-h" 'evil-window-left)
(define-key evil-normal-state-map "\C-j" 'evil-window-down)
(define-key evil-normal-state-map "\C-k" 'evil-window-up)
;; (evil-leader/set-key "tr" 'google-translate-at-point)
(evil-leader/set-key-for-mode 'ruby-mode "a" 'rspec-verify-matching)
(evil-leader/set-key-for-mode 'ruby-mode "d" 'robe-doc)
(defun open-next-line (arg)
      "Move to the next line and then opens a line.
    See also `newline-and-indent'."
      (interactive "p")
      (end-of-line)
      (open-line arg)
      (next-line 1)
      (when newline-and-indent
        (indent-according-to-mode)))
(evil-leader/set-key-for-mode 'emacs-lisp-mode "t" (lambda ()
                                                     ('evil-visual-line) ('eval-region)))

(eval-after-load "slim-mode"
  '(progn
     (evil-leader/set-key "M" 'projectile-rails-find-model)
     (evil-leader/set-key "m" 'projectile-rails-find-current-model)
     (evil-leader/set-key "c" 'projectile-rails-find-current-controller)
     (evil-leader/set-key "C" 'projectile-rails-find-controller)
     (evil-leader/set-key "v" 'projectile-rails-find-current-view)
     (evil-leader/set-key "V" 'projectile-rails-find-view)
     (evil-leader/set-key "h" 'projectile-rails-find-current-helper)
     (evil-leader/set-key "H" 'projectile-rails-find-helper)
     (evil-leader/set-key "l" 'projectile-rails-find-lib)
     (evil-leader/set-key "ff" 'projectile-rails-find-feature)
     (evil-leader/set-key "s" 'projectile-rails-find-current-spec)
     (evil-leader/set-key "S" 'projectile-rails-find-spec)
     (evil-leader/set-key "n" 'projectile-rails-find-current-migration)
     (evil-leader/set-key "N" 'projectile-rails-find-migration)
     (evil-leader/set-key "j" 'projectile-rails-find-javascript)
     (evil-leader/set-key "t" 'projectile-rails-find-stylesheet)
     (evil-leader/set-key "i" 'projectile-rails-find-initializer)
     (evil-leader/set-key "e" 'projectile-rails-find-environment)
     (evil-leader/set-key "@" 'projectile-rails-find-mailer)
     (evil-leader/set-key "#" 'projectile-rails-find-layout)
     (evil-leader/set-key "e" 'projectile-rails-extract-region)
     (evil-leader/set-key "gf" 'projectile-rails-goto-file-at-point)
     (evil-leader/set-key "r" 'projectile-rails-goto-routes)
     (evil-leader/set-key "gs" 'projectile-rails-goto-schema)
     (evil-leader/set-key "gl" 'projectile-rails-goto-spec-helper)
     (evil-leader/set-key "gg" 'projectile-rails-goto-gemfile)
     (evil-leader/set-key "a" 'rspec-verify-matching)))
(eval-after-load "ruby-mode"
  '(progn
     (evil-leader/set-key "M" 'projectile-rails-find-model)
     (evil-leader/set-key "m" 'projectile-rails-find-current-model)
     (evil-leader/set-key "c" 'projectile-rails-find-current-controller)
     (evil-leader/set-key "C" 'projectile-rails-find-controller)
     (evil-leader/set-key "v" 'projectile-rails-find-current-view)
     (evil-leader/set-key "V" 'projectile-rails-find-view)
     (evil-leader/set-key "h" 'projectile-rails-find-current-helper)
     (evil-leader/set-key "H" 'projectile-rails-find-helper)
     (evil-leader/set-key "l" 'projectile-rails-find-lib)
     (evil-leader/set-key "ff" 'projectile-rails-find-feature)
     (evil-leader/set-key "s" 'projectile-rails-find-current-spec)
     (evil-leader/set-key "S" 'projectile-rails-find-spec)
     (evil-leader/set-key "n" 'projectile-rails-find-current-migration)
     (evil-leader/set-key "N" 'projectile-rails-find-migration)
     (evil-leader/set-key "j" 'projectile-rails-find-javascript)
     (evil-leader/set-key "t" 'projectile-rails-find-stylesheet)
     (evil-leader/set-key "i" 'projectile-rails-find-initializer)
     (evil-leader/set-key "e" 'projectile-rails-find-environment)
     (evil-leader/set-key "@" 'projectile-rails-find-mailer)
     (evil-leader/set-key "#" 'projectile-rails-find-layout)
     (evil-leader/set-key "e" 'projectile-rails-extract-region)
     (evil-leader/set-key "gf" 'projectile-rails-goto-file-at-point)
     (evil-leader/set-key "r" 'projectile-rails-goto-routes)
     (evil-leader/set-key "gs" 'projectile-rails-goto-schema)
     (evil-leader/set-key "gl" 'projectile-rails-goto-spec-helper)
     (evil-leader/set-key "gg" 'projectile-rails-goto-gemfile)
     (evil-leader/set-key "z" 'rspec-verify-all)
     (evil-leader/set-key ",t" 'ruby-toggle-block)))

(eval-after-load "paredit-mode"
  '(progn
     (define-key paredit-mode-map (kbd "c-)") 'cedit-or-paredit-slurp)
     (define-key paredit-mode-map (kbd "c-(") 'paredit-backward-slurp-sexp)))
(eval-after-load 'inf-ruby '
  '(define-key inf-ruby-mode-map (kbd "tab") 'auto-complete))

(eval-after-load "haskell-mode"
  '(progn
     (define-key haskell-mode-map (kbd "c-x c-d") nil)
     (define-key haskell-mode-map (kbd "c-c c-z") 'haskell-interactive-switch)
     (define-key haskell-mode-map (kbd "c-c c-l") 'haskell-process-load-file)
     (define-key haskell-mode-map (kbd "c-c c-b") 'haskell-interactive-switch)
     (define-key haskell-mode-map (kbd "c-c c-t") 'haskell-process-do-type)
     (define-key haskell-mode-map (kbd "c-c c-i") 'haskell-process-do-info)
     (define-key haskell-mode-map (kbd "c-c m-.") nil)
     (define-key haskell-mode-map (kbd "<return>") 'newline)
     (define-key haskell-mode-map (kbd "c-c c-d") nil)
     (define-key haskell-mode-map (kbd "c") nil)))

(provide 'keybindings)
